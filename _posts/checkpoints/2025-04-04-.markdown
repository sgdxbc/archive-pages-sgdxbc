---
date:   2025-04-04 07:18:55 +0000
---

今天首先把givre集成进了bft代码库的门限签名模块。它的性能很不错，验证开销和普通的ecdsa没有区别（感觉完全是因为k256没有secp256k1实现高效），感觉可能真的应该用它来搭HotStuff。

性能测试构建依赖已经接近300个了。有点恐怖了，不过想想其中同时包含了0.7、0.8和0.9版本的rand就有点绷不住。

----

> Suri-Payer, Florian, et al. "Basil: Breaking up BFT with ACID (transactions)." Proceedings of the ACM SIGOPS 28th Symposium on Operating Systems Principles. 2021.

打破了传统的「底层复制上层分片+事务并发控制」的分层思想，一体成型的BFT事务存储（store）。规避全局排序，借助乐观并发控制做并发。

对比了TAPIR和基于BFT-SMART和HotStuff的事务存储。感觉整个实验方案是个分布式协议开会，于是去把「评估工件」（evaluation artifact）找来看了看。

> 好小众的翻译。
{: .prompt-tip }

然后发现非常混乱并且全部三个别人的协议都是利用现成的实现。好吧。

论文里有一行脚注说去联系了以前工作的作者确认点事，结果对方无法「定位」一份可以工作的实现，给人笑死了。这事一定要往论文里写吗。

顺着TAPIR去翻了翻Irene的网站。读了她关于怎么写SOSP的博客，很有道理。

> Zhang, Irene, et al. "Building consistent transactions with inconsistent replication." ACM Transactions on Computer Systems (TOCS) 35.4 (2018): 1-37.

又是一篇居然才读的工作，在组里的代码库里已经久闻大名了。感觉上有点和Autobahn神似：把复制层打薄，只负责可用性，然后共识由上层的事务协议保证。不同的是Autobahn是对原本一层的复制协议分层成分发层和共识层，共识层本身就能完成整个复制协议的功能（只是特定场景下的性能不好），所以设计比较简单；而TAPIR所针对的容错事务存储场景本来两层就是各管各的，只是一致性的职责两层各做一部分有冗余交集。所以如果把一致性完全集中到事务层了就要对两层都做彻底地重新设计，复制层提供的接口也要改变（这也是TAPIR的核心思想），整体很复杂，没有完全看懂。

> Qi, Ji, et al. "Bidl: A high-throughput, low-latency permissioned blockchain framework for datacenter networks." Proceedings of the ACM SIGOPS 28th Symposium on Operating Systems Principles. 2021.

突然垮掉的一篇，不知道是不是作者机构里的华为给我带来的刻板印象（。但是总感觉真的有种华为发布会那个故弄玄虚的劲是怎么回事。

给BFT加一个用于投机执行的快速路径。基于假设：一个好的主（primary）复制所出的块大概率会以主复制所决定的排序位置最终提交，因此可以在出块的同时投机执行。这么来说其实就是早期preconfirmation。

另外这个投机执行的路径还可以支持在不额外增加延迟的情况下让执行客户端（投机）执行完对一下答案，从而支持非确定性执行。

我还是没太搞懂它是怎么比排序执行式的协议吞吐更高的，只是提前投机执行和不提前不投机执行的区别啊，开销没有差别。它也不和这种工作比，麻了。感觉它的意思是它觉得排序执行的协议天生不支持并行执行，所以压根不做考虑。

感觉它也可以算是Neo的以前工作，我论文里有没有管它啊（冷汗）。这不禁让人想起我讲完Neo以后就有华为的人来找我聊，糟了。（
