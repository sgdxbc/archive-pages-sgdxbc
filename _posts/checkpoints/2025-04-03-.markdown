---
date:   2025-04-03 02:44:10 +0000
---

又狂写了几天代码。还有文档。

这次的短期目标是很明确的：写出一个让自己满意的HotStuff。满意的定义可能有待商榷，但是一个在primary上都跑不满100%CPU的实现一定是不满意的。

至于我现在是不是做这个的时候，嘛我只能尽量让它是。比方说，把中期目标制定为「使各种各样的BFT协议可以支持PB级别状态大小的状态机」，那么先写出各种各样的BFT就是很有必要的了。

总之，被海量的工程细节淹没，有种永远都到达不了完工的胜利彼岸的幻觉。但是我知道那是幻觉，因为我到达过，或者起码看到过曙光，只是那时写的代码有点不太聪明的样子。

那么这次的就很聪明了吗？越写越觉得眼熟了。希望我还是有一些长进的吧。

总之先来看看这次的料肉比。

![alt text](<assets/img/Screenshot 2025-04-03 at 11.01.40.png>)

不甚理想。

----

> Wang, Stephanie, et al. "Lineage stash: fault tolerance off the critical path." Proceedings of the 27th ACM Symposium on Operating Systems Principles. 2019.

一篇跟我的阅读主题无关的工作，拖拖拉拉看了好久。其中用到了因果日志（causal logging），是个说不定对第三个工作有帮助的概念。

> Giridharan, Neil, et al. "Autobahn: Seamless high speed BFT." Proceedings of the ACM SIGOPS 30th Symposium on Operating Systems Principles. 2024.

因为昨天的组会上讲了这篇所以提前看了。把数据分发和共识解耦的思想在Narwhal and Tusk中就有所体现，但是这篇工作提出分发应当仅仅承担保证可用性的责任，从而更轻量的分发可以带来目标场景下的更理想的性能。

查询Narwhal and Tusk名字怎么拼的过程中发现这个工作的代码是（前）Facebook实现的。浏览实现仓库的过程中发现了[Fabric]。感觉已经没必要自己发明跑实验脚本了。

[Fabric]: https://www.fabfile.org/

前一阵子在那篇PhD读后感还是什么文章里读到，读PhD最重要的就是能接受自己的无知（ignorance）。嘛，我觉得这还不够，还要接受自己总是错失摆脱无知的机会。
